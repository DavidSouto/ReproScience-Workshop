?cite
citation("Tidyverse")
citation("tidyverse")
library("tidyverse")
package("tidyverse")
package(help="tidyverse")
library(help="tidyverse")
tidyverse_logo()
tidyverse_conflicts
tidyverse_conflicts()
library("tidyverse")
# fin dout how to cite in a publication (this format can be imported to Zotero for instance)
citation("Tidyverse")
# fin dout how to cite in a publication (this format can be imported to Zotero for instance)
citation("tidyverse")
library(meme)
library(help="meme")
library("tidyverse")
# find out how to cite in a publication (this format can be imported to Zotero for instance)
citation("tidyverse")
# Optional: Find out general information about the package with library(help="tidyverse"), find out what a meme is with library(help="meme")
# Use
library("tidyverse")
# Use
library("tidyverse")
# find out how to cite in a publication (this format can be imported to Zotero for instance)
citation("tidyverse")
# Optional: Find out general information about the package with library(help="tidyverse"), find out what a meme is with library(help="meme")
library("tidyverse")
# Use
library(tidyverse)
detach(tidyverse)
unloadNamespace(tidyverse)
library(tidyverse)
detach("tidyverse",unload=TRUE)
detach(tidyverse,unload=TRUE)
detach(package::tidyverse,unload=TRUE)
detach("package::tidyverse"
,unload=TRUE)
detach("package::tidyverse",unload=TRUE)
detach("package:tidyverse",unload=TRUE)
# Use Ctrl+Enter (Cmd+Enter) to run line-by-line
library("tidyverse")
library("tidyverse")
library(tidyverse)
sessionInfo()
tidyverse_packages()
dplyr::filter()
?filter
# we are telling R to source (run) the file that is one folder up with ".."
source("../Pre_Package_Install.R")
install.package("fs")
install.packages("fs")
?fs
??fs
# we are installing (and compiling) the fs package
install.packages("fs")
library(fs)
?fs
install.packages("prodigenr")
?prodigenr
??prodigenr
prodigenr
library(prodigenr)
?prodigenr
vignette(prodigenr)
vignette("prodigenr")
files <- list.files(pattern = "data_\\d{8}_analysis\\.csv")
files
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE)
source("~/.active-rstudio-document")
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Load necessary library
set.seed(123)  # For reproducibility
# Define the date range for file creation
start_date <- as.Date("2023-05-01")
end_date <- as.Date("2023-05-31")
date_seq <- seq(start_date, end_date, by = "10 days")
# Create sample files
for (date in date_seq) {
# Create a systematic file name
filename <- paste0("data_", format(date, "%Y%m%d"), "_analysis.csv")
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
}
filename <- paste0("data_", format(date, "%Y%m%d"), "_analysis.csv")
format(date, "%Y%m%d")
date
format(time(date), "%Y%m%d")
fomrat(date)
format(date)
start_date
date_seq
date
# Create sample files
for (date in date_seq) {
browser()
# Create a systematic file name
filename <- paste0("data_", format(date, "%Y%m%d"), "_analysis.csv")
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
}
date
date_seq
date in date_seq
# Create sample files
for (date in c(date_seq)) {
browser()
# Create a systematic file name
filename <- paste0("data_", format(date, "%Y%m%d"), "_analysis.csv")
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
}
date
date_seq[1]
# Create sample files
for(n in c(1:length(date_seq)) {
date
# Create sample files
for(n in c(1:length(date_seq))) {
browser()
# Create a systematic file name
filename <- paste0("data_", format(date[n], "%Y%m%d"), "_analysis.csv")
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
}
date
# Create a systematic file name
filename <- paste0("data_", format(date_seq[n], "%Y%m%d"), "_analysis.csv")
filename
# Create sample files
for(n in c(1:length(date_seq))) {
browser()
# Create a systematic file name
filename <- paste0("data_", format(date_seq[n], "%Y%m%d"), "_analysis.csv")
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
# Write the data to a CSV file
write.csv(data, filename, row.names = FALSE, quote = TRUE)
}
# Generate random data
data <- data.frame(
date = rep(as.character(date), 5),
value = sample(50:100, 5),
category = sample(c("A", "B", "C"), 5, replace = TRUE)
)
q
q
quit()
source("D:/GitHub/ReproScience/day1-Rintro/data/fake_data.R")
getwd()
dir
ls()
# List all CSV files with our systematic naming pattern
files <- list.files(pattern = "data_\\d{8}_analysis\\.csv")
files
# List all CSV files with our systematic naming pattern
list.files(pattern = "data_\\d{8}_analysis\\.csv")
# List all CSV files within the data folder
list.files(pattern = "data_\\d{8}_analysis\\.csv")
# List all CSV files within the data folder
list.files(pattern = "data_\\data*\\.csv")
# List all CSV files within the data folder
list.files(pattern = "data_\\data*.csv")
# List all CSV files within the data folder
list.files(pattern = "data_\\*.csv")
list('./data/data-*')
list('./data/d')
list('./data/')
ls('./data/')
dir('./data/')
# List all CSV files within the data folder
dir(data_\\*.csv")
# List all CSV files within the data folder
dir('./data/')
# List all CSV files within the data folder
dir('./data/')
dir('./data/*.R')
dir('./data/*.csv')
str(data)
print(paste("The average is:", avg))
main <- function() {
data <- c(10, 20, 30, NA, 50)  # NA will cause an error in sum
avg <- calculate_average(data)
print(paste("The average is:", avg))
}
main()
calculate_average <- function(numbers) {
total <- sum(numbers)
average <- total / length(numbers)  # Potential division by zero error
return(average)
}
main <- function() {
data <- c(10, 20, 30, NA, 50)  # NA will cause an error in sum
avg <- calculate_average(data)
print(paste("The average is:", avg))
}
main()
main <- function() {
data <- c(10, 20, 30, 0, 50)  # NA will cause an error in sum
avg <- calculate_average(data)
print(paste("The average is:", avg))
}
main()
main <- function() {
data <- c();#c(10, 20, 30, 0, 50)  # NA will cause an error in sum
avg <- calculate_average(data)
print(paste("The average is:", avg))
}
main()
recover()
install.packages("lintr")
# run on this file
?lintr
??lintr
lintr
vignettes(lintr)
vignette(lintr)
vignette("lintr")
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors")
library("linter")
library("lintr")
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors")
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors.Rmd")
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors.Rmd")
calculate_average <- function(numbers) {
total <- sum(numbers)
average <- total / length(numbers)  # Potential division by zero error
return(average)
}
# Create sample sales data
create_sales_data <- function(n = 100) {
data.frame(
sales = c(
rnorm(n-5, mean = 1000, sd = 200),  # Normal sales values
runif(5, 0, 0.001)  # Few very small values near zero
),
costs = rnorm(n, mean = 800, sd = 150),
marketing_spend = rnorm(n, mean = 200, sd = 50),
region = sample(c("North", "South", "East", "West"), n, replace = TRUE)
)
}
# Generate data
sales_data <- create_sales_data()
sales_data
# Generate data
sales_data <- create_sales_data()
calculate_performance_metrics <- function(data) {
# Calculate basic metrics
data$profit <- data$sales - data$costs data$marketing_ratio <- data$marketing_spend / data$sales
# Set random seed for reproducibility
set.seed(123)
# Create sample sales data
create_sales_data <- function(n = 100) {
data.frame(
sales = c(
rnorm(n-5, mean = 1000, sd = 200),  # Normal sales values
runif(5, 0, 0.001)  # Few very small values near zero
),
costs = rnorm(n, mean = 800, sd = 150),
marketing_spend = rnorm(n, mean = 200, sd = 50),
region = sample(c("North", "South", "East", "West"), n, replace = TRUE)
)
}
# Generate data
sales_data <- create_sales_data()
sales_data
# Calculate basic metrics
data$profit <- data$sales - data$costs data$marketing_ratio <- data$marketing_spend / data$sales
data$marketing_ratio <- data$marketing_spend / data$sales
# Calculate basic metrics
data$profit <- data$sales - data$costs
data$marketing_ratio <- data$marketing_spend / data$sales
calculate_performance_metrics <- function(data) {
# Calculate basic metrics
data$profit <- data$sales - data$costs
data$marketing_ratio <- data$marketing_spend / data$sales
# Calculate complex performance score
data$performance_score <- sqrt( (data$profit / data$sales) * log(data$marketing_ratio + 1) * (data$sales / mean(data$sales)) )    return(data)
library("lintr")
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors.Rmd")
# Sample script
fun <- function(numbers) {total <- sum(numbers); average <- total / length(numbers) return(average)}
# Sample script
fun <- function(numbers) {total <- sum(numbers); average <- total / length(numbers) return(average)}
# Sample script
fun <- function(numbers) {
total <- sum(numbers);
average <- total / length(numbers)
return(average)}
main <- function() { data <- c(10, 20, 30, 0, 50); avg <- fun(data); print(paste("The average is:", avg))}
main()
# Sample script
fun <- function(numbers) {
total <- sum(numbers);
average <- total / length(numbers),
# run linter on this file (or any R file):
lint(filename="./ex1_3_finding_errors.Rmd")
# this is how functions work in R
# Define a function to calculate the square of a number
square <- function(x) {
result <- x^2  # Calculate the square
return(result)  # Return the result
}
# Here is another function that generates an error
fun <- function(numbers) { total <- sum(numbers); average <- total / length(numbers), return(average)}
# this is how functions work in R
# Define a function to calculate the square of a number
square <- function(x) {
result <- x^2  # Calculate the square
return(result)  # Return the result
}
square(2)
# Here is another function that generates an error
fun <- function(numbers) { total <- sum(numbers); average <- total / length(numbers), return(average)}
# this is how functions work in R
# Define a function to calculate the square of a number
# Execute with Ctrl+Enter (running the first line will run the entire function); try it out with square(2)
square <- function(x) {
result <- x^2  # Calculate the square
return(result)  # Return the result
}
# Here is another function that generates an error
fun <- function(numbers) { total <- sum(numbers); average <- total / length(numbers), return(average)}
# Here is another function that generates an error
fun <- function(numbers) { total <- sum(numbers); average <- total / length(numbers) return(average)}
# this is how functions work in R
# Define a function to calculate the square of a number
# Execute with Ctrl+Enter (running the first line will run the entire function); try it out with square(2)
square <- function(x) {
result <- x^2  # Calculate the square
return(result)  # Return the result
}
# Here is another function that generates an error
fun <- function(numbers) { total <- sum(numbers); average <- total / length(numbers) return(average)}
# Without setting a seed
set.seed(123)  # Set the seed for reproducibility
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# Without setting a seed
set.seed(123)  # Set the seed for reproducibility
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# Without setting a seed
set.seed(123)  # Set the seed for reproducibility
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
random_numbers <- rnorm(5)  # Generate 5 random numbers
random_numbers <- rnorm(5)  # Generate 5 random numbers
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# Run these two lines repeatedly
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# Run these two lines repeatedly
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# Set the seed for reproducibility
set.seed(123)
random_numbers <- rnorm(5)  # Generate 5 random numbers
print(random_numbers)
# use sessionInfo() to retrieve the package versions we are using
sessionInfo()
# use sessionInfo() to retrieve the package versions we are using
sessionInfo()
packages<-sessionInfo()
pachakges
packages<-sessionInfo()
pakages<-sessionInfo()
pakages
pakages$R.version
pack_Info
# use sessionInfo() to retrieve the package versions we are using and system information
pack_Info<-sessionInfo()
pack_Info
pack_Info$platform
pack_Info$platform
pack_Info$locale
pack_Info$tzone
pack_Info$basePkgs
pack_Info$otherPkgs
pack_Info$RNGkind
?rnorm
# There are several possible RNGs, retrieve which one is used:
print(pack_Info$RNGkind)
# We could actually use a different one by
set.seed(42)
random_numbers <- rnorm(5)
print(random_numbers)
RNGkind("Wich") # specify Whichmann and Hill algorithm
set.seed(42)
print(random_numbers)
# We could actually use a different one by
set.seed(42)
# We could actually use a different RNG one by
set.seed(42)
random_numbers <- rnorm(5)
print(random_numbers)
RNGkind("Wich") # specify Whichmann and Hill algorithm
set.seed(42)
print(random_numbers)
# We could actually use a different RNG one by
RNGkind("Wich")
# We could actually use a different RNG one by
RNGkind("Marsenne")
pack_info()
pack_info<-sessionInfo()
pack_info$RNGkind
# We could actually use a different RNG one by
RNGkind("Marsenne-Twiseter")
# We could actually use a different RNG one by
RNGkind("Marsenne-Twisetr")
# We could actually use a different RNG one by
RNGkind("Mersenne-Twisetr")
# We could actually use a different RNG one by
RNGkind("Mersenne-Twister")
set.seed(42)
random_numbers <- rnorm(5)
print(random_numbers)
set.seed(42) # same seed as above
print(random_numbers)
RNGkind("Wich") # specify Whichmann and Hill algorithm
set.seed(42) # same seed as above
print(random_numbers)
# We could actually use a different RNG one by
RNGkind("Mersenne-Twister")
set.seed(42)
random_numbers <- rnorm(5)
print(random_numbers)
random_numbers <- rnorm(5)
print(random_numbers)
# We could actually use a different RNG one by
RNGkind("Mersenne-Twister")
set.seed(42)
random_numbers <- rnorm(5)
print(random_numbers)
RNGkind("Wich") # specify Whichmann and Hill algorithm
set.seed(42) # same seed as above
random_numbers <- rnorm(5)
print(random_numbers)
?sink
# Save this information in a text file with sink, like set.seed it could be
# something you specify on top of your main analysis script.
sink('session_info.txt');
?session_Info
??session_Info
# You can easily save this information in a text file with sink, like set.seed it could be
# something you specify on top of your main analysis script.
sink('./analysis/session_info.txt') # redirects the output stream so you print to a file instead of printing to the Console
print(session_info())
sink() # close the redirecting to the file
# You can easily save this information in a text file with sink, like set.seed it could be
# something you specify on top of your main analysis script.
sink('./analysis/session_info.txt') # redirects the output stream so you print to a file instead of printing to the Console
print(sessionInfo())
sink() # close the redirecting to the file
There are different ways of installing older packages. One way is to specify versions using the `remotes package`.
# Install renv if you haven't already
install.packages("renv") # Initialize renv in your project
renv
renv::init() # Install packages as needed
renv::init() # Install packages as needed
renv::install("dplyr") # Install dplyr within the environment
renv::install("ggplot2") # Snapshot the current state of your project
# Install renv if you haven't already
install.packages("myenv") # Initialize renv in your project, takes a while
renv::init() # Install packages as needed
renv::init() # Install packages as needed
napshot the current state of your project
renv::install("dplyr") # Install dplyr within the environment
renv::snapshot()
exit
quit()
