dplyr::mutate(tt_data, short=1)
dplyr::mutate(tt_data, short=video_duration_sec>20)
log(tt_data$video_comment_count)
log(tt_data$video_comment_count,na.rm=TRUE)
#  tt_data is routed to drop_na() which strips out rows containing NA occurrences, not-a-number
#  the result of that is assigned to tt_data
tt_data <- tt_data %>%
drop_na()
# we are creating a new variable in the dataset, called long, which
# takes a value of TRUE if video_duration is below 20 seconds, FALSE if above
tt_data <- tt_data %>%
mutate(short = video_duration_sec>20)
print(tt_data$short)
log(tt_data$video_comment_count)
tt_data$video_comment_count
as.integer(tt_data$video_comment_count)
str(tt_data)
dplyr::if_else
tt_data <- read.csv("./data/tiktok_data.csv")
# Count the number of posts per user
post_counts <- tt_data %>%
group_by(user_id) %>%
summarise(post_count = n(), .groups = 'drop')
tt_data$video_id
tt_data$X.
tt_data <- read.csv("./data/tiktok_data.csv")
# Count the number of posts per user
post_counts <- tt_data %>%
group_by(user_id) %>%
summarise(post_count = n(), .groups = 'drop')
post_counts
hist(user_id)
hist(post_count)
hist(post_counts$post_count)
plot(post_counts)
tt_data$claim_status
tt_data$author_ban_status
# Count the number of posts per user
post_counts <- tt_data %>%
group_by(author_ban_status) %>%
summarise(post_count = n(), .groups = 'drop')
hist(post_counts)
hist(post_counts$post_count)
post_counts
tt_data
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
summarise(post_count = n(), .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
summarise(post_count = mean(), .groups = 'drop')
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
summarise(post_count = n(), .groups = 'drop')
counts_by_status
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
summarise(post_count = mean(), .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
summarise(post_count = mean, .groups = 'drop')
# check what happens when we don't drop group
tt_data %>% summarise(post_count = n(), .groups = 'drop')
tt_data
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = n())
# check what happens when we don't drop group
tt_data %>% summarise(post_count = n(), .groups = 'drop')
tt_data
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = n(), .groups = 'drop')
tt_data %>% summarise(post_count = mean, .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = mean(), .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = mean(view_count), .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = mean(video_view_count), .groups = 'drop')
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# make sure
mutate(video_view_count=is.numeric(video_view_count))
# We are going to count the number of posts by user status
counts_by_status <- tt_data %>%
# make sure
mutate(video_view_count=is.numeric(video_view_count)) %>%
# we group by ban status
group_by(author_ban_status) %>%
# we summarize by status, and calculate the number of posts per group
# .groups = 'drop' is used to remove the grouping once we are done
# note that n() does a count of rows within a group, it doesn't need to know the column
summarise(post_count = mean(video_view_count), .groups = 'drop')
counts_by_status
counts_by_status <- tt_data %>%
# make sure
mutate(video_view_count=is.numeric(video_view_count))
counts_by_status
str(tt_data)
# make numbers variables numeric
tt_data<-is.numeric(tt_data$video_comment_count)
tt_data<-is.numeric(tt_data$video_view_count)
tt_data<-is.numeric(tt_data$video_like_count)
tt_data <- read.csv("./data/tiktok_data.csv")
# make numbers variables numeric
tt_data<-is.numeric(tt_data$video_comment_count)
tt_data<-is.numeric(tt_data$video_view_count)
# make numbers variables numeric
tt_data$video_comment_count<-is.numeric(tt_data$video_comment_count)
tt_data <- read.csv("./data/tiktok_data.csv")
# make numbers variables numeric
tt_data$video_comment_count<-is.numeric(tt_data$video_comment_count)
tt_data$video_view_count<-is.numeric(tt_data$video_view_count)
tt_data$video_like_count<-is.numeric(tt_data$video_like_count)
str(tt_data)
tt_data <- read.csv("./data/tiktok_data.csv")
str(tt_data)
# make numbers variables numeric
tt_data$video_comment_count<-as.numeric(tt_data$video_comment_count)
tt_data$video_view_count<-as.numeric(tt_data$video_view_count)
tt_data$video_like_count<-as.numeric(tt_data$video_like_count)
tt_data <- read.csv("./data/tiktok_data.csv")
# make numbers variables numeric
tt_data$video_comment_count<-as.numeric(tt_data$video_comment_count)
tt_data$video_view_count<-as.numeric(tt_data$video_view_count)
tt_data$video_like_count<-as.numeric(tt_data$video_like_count)
tt_data
str(tt_data)
# make numbers variables numeric
tt_data$video_comment_count<-as.numeric(tt_data$video_comment_count)
tt_data$video_view_count<-as.numeric(tt_data$video_view_count)
tt_data$video_like_count<-as.numeric(tt_data$video_like_count)
tt_data$video_download_count<-as.numeric(tt_data$video_download_count)
as_tibble(tt_data)
# We are interested in looking at the distribution of view counts, likes and shares
tt_data_distribs <- tt_data %>%
filter(video_view_count, video_download_count, video_likes_count)
?tidyr
# We are interested in looking at the distribution of view counts, likes and shares
tt_data_distribs <- tt_data %>%
filter(video_view_count>20))
# We are interested in looking at the distribution of view counts, likes and shares
tt_data_distribs <- tt_data %>%
filter(video_view_count>20)
tt_data_distribs
tt_data_distribs$video_view_count
hist(tt_data_distribs$video_view_count)
hist(tt_data_distribs$video_view_count,100)
hist(tt_data_distribs$video_view_count,10000)
# We are interested in looking at the distribution of view counts, likes and shares
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# if we just plot the distribution of views
hist(log(tt_data$video_view_count))
# if we just plot the distribution of views
hist(tt_data$video_view_count)
# if we just plot the distribution of views
hist(log(tt_data$video_view_count))
# if we just plot the distribution of views
hist(tt_data$video_view_count)
# if we just plot the distribution of views
hist(tt_data$video_view_count,1000)
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# We are interested in looking at the distribution of view counts, likes and shares
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
```{r, fig.show='hold'}
```{r, fig.show="hold"}
# We are interested in looking at the distribution of view counts, likes and shares
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# We are interested in looking at the distribution of view counts, likes and shares
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
# We are interested in looking at the distribution of view counts, likes and shares
# let's plot the distribution of views
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(0, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# let's see the frequency of videos per view count
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(1000, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(1000, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(10000, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(15000, 50000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(15000, 50000),           # Set x-axis limits (adjust as needed)
ylim = c(0, 1000),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(15000, 50000),           # Set x-axis limits (adjust as needed)
ylim = c(0, 100),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 1000,                # Number of bins
xlim = c(15000, 50000),           # Set x-axis limits (adjust as needed)
ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# let's see the frequency of videos per view count
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 100,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_view_count,
breaks = 100,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 100,                # Number of bins
xlim = c(0, 5000),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 5000,                # Number of bins
xlim = c(0, 5000),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_view_count,
breaks = 5000,                # Number of bins
xlim = c(0, 20000),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_duration_sec,
breaks = 5000,                # Number of bins
xlim = c(0, 20000),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_duration_sec,
breaks = 5000,                # Number of bins
xlim = c(0, 1000),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_duration_sec,
breaks = 5000,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data$video_download_count
# let's see the frequency of videos per view count
# Create a histogram of video view counts with specified x-axis limits
hist(tt_data$video_download_count,
breaks = 5000,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
hist(tt_data$video_download_count,
breaks = 5000,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
# We are interested in looking at the distribution of view counts, likes and shares
# let's see the frequency of videos downloads numbers
# We can use base R to create a histogram of video download counts with specified x-axis limits
hist(tt_data$video_download_count,
breaks = 5000,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
# We are interested in looking at the distribution of view counts, likes and shares
# let's see the frequency of videos downloads numbers
# We can use base R to create a histogram of video download counts with specified x-axis limits
hist(tt_data$video_download_count,
breaks = 5000,                # Number of bins
xlim = c(0, 100),           # Set x-axis limits (adjust as needed)
#ylim = c(0, 20),           # Set x-axis limits (adjust as needed)
main = "Histogram of Video View Counts",  # Title of the histogram
xlab = "Video View Count",    # Label for the x-axis
ylab = "Frequency",            # Label for the y-axis
col = "lightblue",             # Color of the bars
border = "black")              # Color of the bar borders
tt_data_distribs <- tt_data %>%
filter(video_view_count>100)
# view counts follow a well-known distribution, Zipf's law, let's see
# filter out across columns with across()
# locate rows with where()
