control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
plot(specs, circular = TRUE)
results$data$model
results$data$estimate
plot(results$data$estimate)
plot(results)
# some options for chunks: we ask for it to produce outputs, no messages or warnings
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# You will bbe asksed whether you want to install from source, say yes
if (!require("specr"))
install.packages("specr")
if (!require("tidyverse"))
install.packages("tidyverse")
if (!require("ggplot2"))
install.packages("ggplot2")
library(tidyverse)
library(specr)
specs <- setup(data = df,
x = c("masfem:dam", "masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
results$data
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure", "pressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure", "pressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# The multiverse analysis for this data ... was quite more complex, as # # it considered many exclusion critera multiplying options even further
specs <- setup(data = df,
x = c("masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# some options for chunks: we ask for it to produce outputs, no messages or warnings
knitr::opts_chunk$set(echo = TRUE, message = TRUE, warning = TRUE)
# You will bbe asksed whether you want to install from source, say yes
if (!require("specr"))
install.packages("specr")
if (!require("tidyverse"))
install.packages("tidyverse")
if (!require("ggplot2"))
install.packages("ggplot2")
library(tidyverse)
library(specr)
specs <- setup(data = df,
x = c("masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
results$data$model
results$data$formula
results$data$estimate
sort(results$data$estimate)
order<-sort(results$data$estimate)
order
sorted_results <- results %>% dplyr::arrange(esitmate)
sorted_results <- results$data %>% dplyr::arrange(esitmate)
sorted_results <- results$data %>% dplyr::arrange(esimate)
sorted_results <- results$data %>% dplyr::arrange(estimate)
sorted_results
sorted_results$estimate
plot(sorted_results$estimate)
sorted_results$formulas
sorted_results$formula
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam:masfem","zpressure:masfem"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam:masfem","zpressure:masfem"),
simplify = FALSE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
summary(fit)
results$data$term
specs <- setup(data = df,
x = c("masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam:masfe","zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
specs <- setup(data = df,
x = c("masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("wind","zcat"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("wind"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam", "zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
results$data$term
specs <- setup(data = df,
x = c("masfem","masfem:dam","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam", "zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
results$data$term
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam", "zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
control = c("dam", "zpressure"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
# The multiverse analysis for this data ... was quite more complex, as # # it considered many exclusion critera multiplying options even further
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
# Filter results for the term "masfem"
masfem_results <- results$data %>%
dplyr::filter(term == "masfem")
# View the filtered results
print(masfem_results)
# Summarize the significance of masfem
summary_masfem <- masfem_results %>%
dplyr::summarize(
mean_estimate = mean(estimate, na.rm = TRUE),
mean_p_value = mean(p.value, na.rm = TRUE),
significant_count = sum(p.value < 0.05, na.rm = TRUE),
total_models = n()
)
print(summary_masfem)
specs <- setup(data = df,
x = c("masfem","masfem:dam+masfem:zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
# Filter results for the term "masfem"
masfem_results <- results$data %>%
dplyr::filter(term == "masfem")
# See how many options we have in another way
# Can you see what the forking paths in B correspond to?
plot(specs, circular = TRUE)
plot(results)
results %>% dplyr::arrange(estimate)
# to find the formula, lets sort the data by estimate, as we do in Figure A
results$data %>% dplyr::arrange(estimate)
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::filter()          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::filter(term)          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::filter(term)          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
term          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term)          # display only the terms of the model
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model)          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,formula)          # display only the terms of the model
specs <- setup(data = df,
x = c("masfem","dam", "zpressure","masfem:zpressure","masfem:dam"),
y = c("death"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,formula)          # display only the terms of the model
specs <- setup(data = df,
x = c("masfem","masfem:zpressure","masfem:dam"),
y = c("death"),
control = c("dam", "zpressure")
model = c("glm_poisson","lm","glm"),
specs <- setup(data = df,
x = c("masfem","masfem:zpressure","masfem:dam"),
y = c("death"),
control = c("dam", "zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,formula)          # display only the terms of the model
specs <- setup(data = df,
x = c("masfem","masfem:zpressure","masfem:dam"),
y = c("death"),
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# We can have a look at the terms this plot corresponds to by arranging by estimate
# we haven't isolated the effect of masfem but shown the impact of every choice on
# the ability to predict deaths
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,formula)          # display only the terms of the model
specs <- setup(data = df,
x = c("masfem"),
y = c("death"),
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
specs <- setup(data = df,
x = c("masfem", "masfem:dam", "masfem:zpressure"),
y = c("death"),
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# We can have a look at the terms this plot corresponds to by arranging by estimate
# we haven't isolated the effect of masfem but shown the impact of every choice on
# the ability to predict deaths
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,formula)          # display only the terms of the model
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,control,formula)          # display only the terms of the model
specs <- setup(data = df,
x = c("masfem", "masfem:dam", "masfem:zpressure"),
y = c("death"),
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
# Explore the different specificaitons with results$data
summary(results)
plot(results)
# We can have a look at the terms this plot corresponds to by arranging by estimate
# we haven't isolated the effect of masfem but shown the impact of every choice on
# the ability to predict deaths
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,control,formula)          # display only the terms of the model
results$data
# to find the formula, lets use the *arrange()* sort the data by estimate, as we do in Figure A
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,controls,formula)          # display only the terms of the model
plot(results)
specs <- setup(data = df,
x = c("masfem", "masfem:dam", "masfem:zpressure"),
y = c("death"),
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
specs <- setup(data = df,
x = c("masfem", "masfem:dam", "masfem:zpressure"), # we are entering options for independent variables, those are our main variables of interest
y = c("death","dam"), # options for dependent variables
control = c("masfem:dam", "masfem:zpressure"),
model = c("glm_poisson","lm","glm"),
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
summary(results)
```{r}
plot(results)
specs <- setup(data = df,
x = c("masfem", "masfem:dam", "masfem:zpressure"), # we are entering options for independent variables, those are our main variables of interest
y = c("death","dam"), # options for dependent variables, we could predict damage amount instead of deaths
control = c("masfem:dam", "masfem:zpressure"), # options for control variables, that is other predictors in our model
model = c("glm_poisson","lm","glm"), # optoins for models
simplify = TRUE)
specs <- setup(data = df, # our dataset
x = c("masfem", "masfem:dam", "masfem:zpressure"), # we are entering options for independent variables, those are our main variables of interest
y = c("death","dam"), # options for dependent variables, we could predict damage amount instead of deaths
control = c("masfem:dam", "masfem:zpressure"), # options for control variables, that is other predictors in our model
model = c("glm_poisson","lm","glm"), # optoins for models
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
results$data %>%
dplyr::arrange(estimate) %>% # sort by estimate
dplyr::select(term,estimate,model,controls,formula)
specs <- setup(data = df, # our dataset
x = c("masfem", "masfem:dam", "masfem:zpressure"), # we are entering options for independent variables, those are our main variables of interest
y = c("death","dam"), # options for dependent variables, we could predict damage amount instead of deaths
control = c("masfem:dam", "masfem:zpressure"), # options for control variables, that is other predictors in our model
model = c("lm","glm"), # optoins for models
simplify = TRUE)
results <- specr(specs) # Summarize results summary(results)
summary(results)
plot(results)
plot(results)
source("~/.active-rstudio-document", echo=TRUE)
# we ar loading the data-set, it takes the form of an .RData file, something
# that can be loaded straight away into R, after loading you will see data.frame object in the  Environment window.
load(file='./data/hurricane.RData')
setcd()
wd()
?cd
??cd
?current
setwd()
?setwd()
if (is_package_installed(package)) {
message(sprintf("%s is successfully installed.", package))
} else {
message(sprintf("WARNING: %s installation may have failed.", package))
}
source("C:/Users/david/Documents/GitHub/ReproScience/Pre_Package_Install.R")
R.version
install.packages("specr")
install.packages("specr")
source("C:/Users/david/Documents/GitHub/ReproScience/Pre_Package_Install.R")
